function [log_parameters, gps1, gps2, speed_limits, kalman_control,...          mhead, hv_battery, lv_battery, gc, scene, ...          power_state_time, power_state_current_ma,...          target_lat_long,sm_cco,...          serial_date_time, kalman_x, kalman_y,...          sensor_secs, sensor_mamps, data_file_size, errors, ...          month, day_of_month, year_minus1900, hours, minutes, ...          seconds] = readlog_64(fid_log)    keywords = char(...   '$ID',...			% 1   '$DIVE',...			% 2   '$D_SURF',...		% 3   '$D_FLARE',...		% 4   '$D_TGT',...			% 5   '$D_ABORT',...		% 6   '$D_NO_BLEED',...            % 7   '$T_DIVE',...		% 8   '$T_MISSION',...		% 9   '$T_TURN',...		% 10   '$T_TURN_SAMPINT',...        % 11   '$T_NO_W',...                % 12   '$USE_BATHY',...             % 13   '$D_OFFGRID',...             % 14   '$APOGEE_PITCH',...		% 15   '$MAX_BUOY',...		% 16   '$COURSE_BIAS',...		% 17   '$GLIDE_SLOPE',...		% 18       '$SPEED_FACTOR',...		% 19   '$RHO',...			% 20   '$KALMAN_USE',...            % 21   '$KALMAN_Q',...              % 22   '$KALMAN_R',...              % 23   '$HD_A',...			% 24   '$HD_B',...			% 25   '$HD_C',...			% 26   '$SM_CC',...			% 27   '$N_FILEKB',...		% 28   '$TEL_PREFIX',...		% 29   '$TEL_NUM',...		% 30   '$ALT_TEL_PREFIX',...        % 31   '$ALT_TEL_NUM',...           % 32   '$CALL_NDIVES',...		% 33   '$N_NOCOMM',...              % 34   '$CALL_TRIES',...		% 35   '$CALL_WAIT',...		% 36   '$T_GPS',...			% 37   '$N_GPS',...                 % 38   '$T_GPS_ALMANAC',...         % 39   '$T_GPS_CHARGE',...          % 40   '$T_RSLEEP',...		% 41   '$C_PITCH',...		% 42   '$PITCH_K',...		% 43   '$P_OVSHOOT',...             % 44   '$PITCH_GAIN',...		% 45   '$PITCH_AD_RATE',...         % 46   '$C_ROLL_DIVE',...           % 47   '$C_ROLL_CLIMB',...          % 48   '$HEAD_ERRBAND',...          % 49   '$ROLL_K',...		% 50   '$R_PORT_OVSHOOT',...        % 51   '$R_STBD_OVSHOOT',...        % 52   '$ROLL_AD_RATE',...          % 53   '$C_VBD',...			% 54   '$VBD_K',...			% 55   '$PITCH_VBD_SHIFT',...       % 56   '$VBD_PUMP_AD_RATE_SURFACE',...      % 57   '$VBD_PUMP_AD_RATE_APOGEE',...       % 58   '$VBD_BLEED_AD_RATE',...     % 59   '$AH0_24V',...		% 60   '$AH0_10V',...		% 61   '$CAPTURING',...             % 62   '$GPS1',...			% 63   '$_CALLS',...		% 64   '$_XMS_NAKs',...             % 65   '$_XMS_TOUTs',...            % 66   '$SM_CCo',...                % 67   '$_SM_DEPTHo',...            % 68   '$_SM_ANGLEo ',...           % 69   '$GPS2',...			% 70   '$SPEED_LIMITS',...		% 71   '$TGT_NAME',...              % 72   '$TGT_LATLONG',...		% 73   '$TGT_RADIUS',...            % 74   '$KALMAN_CONTROL',...	% 75   '$KALMAN_X',...		% 76   '$KALMAN_Y',...              % 77   '$MHEAD_RNG_PITCHd_Wd',...	% 78   '$D_GRID',...		% 79   '$GC',...	                % 80   '$HUMID',...                 % 81   '$24V_AH',...		% 82   '$10V_AH',...		% 83   '$DEVICE_SECS',...		% 84   '$DEVICE_MAMPS',...		% 85   '$T_DIVE2',...		% 86   '$SENSOR_SECS',...           % 87   '$SENSOR_MAMPS',...          % 88   '$DATA_FILE_SIZE',...        % 89   '$ERRORS',...                % 90   '$SCENE',...                 % 91    '$D_NO_BLEED',...            % 92   'T_NO_W',...                 % 93    '$COMM_SEQ',...              % 94   '$UNCOM_BLEED',...           % 95   '$TCM_TEMP');                % 96    log_parameters = zeros(1,96);%***********************************************************************************************************% NOTE: Keywords that are prefixed with $_ are values obtained from the previous profile rather than the%       the current profile%***********************************************************************************************************% Array elements for $DEVICE_TIME (all values in seconds)%    1) Pitch mass adjust time%    2) Roll mass adjust time%    3) G&C VBD pump time%    4) Surface VBD pump time %    5) Iridium modem connect time-power up until ATDT cmd (from last surface operation)%    6) Iridium modem call establish time-ATDT cmd up until first XMODEM invocation (from last surface operation)%    7) Iridium modem data transfer time-YMODEM transfers and file splitting (from last surface operation)%    8) GPS fix time (pre- and post-data telemetry, from last surface operation)%    9) TT8 non-sleep mode: calc, upload, sampling time%   10) TT8 sleep mode time % Array elements for $DEVICE_CURRENT (all values in milliamps)%    1) Pitch mass adjust current (fixed)%    2) Roll mass adjust current (fixed)%    3) G&C VBD pump current (measured)%    4) Surface VBD pump current (fixed)%    5) Iridium modem connect current-power up until ATDT cmd (from last surface operation)%       (measured 'average' of several samples during connect)%    6) Iridium modem call establish current-ATDT cmd up until first YMODEM invokation (from last surface operation)%       (measured 'average' of several samples during connect)%    7) Iridium modem data transfer-XMODEM transfers and file splitting (from last surface operation)%       (measured 'average' of values read at end of each data file transfer)%    8) GPS current(pre- and post-data telemetry, from last surface operation)%    9) TT8 non-sleep mode current: calc, upload, sampling (fixed)%   10) TT8 sleep mode current (fixed)                              %******************************************************************************% $GC, $SCENE can occur multiple number of times in file% All other parameters only occur once%******************************************************************************% specify keyword index values for parameters with multiple values or multiple instances in%  log filegps1_index = 63;sm_cco_index = 67;gps2_index = 70;speed_limits_index = 71;tgt_name_index = 72;target_lat_long_index = 73;kalman_control_index = 75;kalman_x_index = 76;kalman_y_index = 77;mhead_rng_wd_index = 78;gc_index = 80;hv_battery_index = 82;lv_battery_index = 83;device_time_index = 84;device_current_index = 85;sensor_secs_index = 87;sensor_mamps_index = 88;data_file_size_index = 89;errors_index = 90;scene_index = 91;% initialize index pointers for parameters with multiple values or multiple instances in%  log filegps1_count = 1;sm_cco_count = 1;gps2_count = 1;speed_limits_count = 1;kalman_control_count = 1;kalman_x_count = 1;kalman_y_count = 1;mhead_rng_wd_count= 1;hv_battery_count = 1;lv_battery_count = 1;gc_count = 1;scene_count = 1;device_time_count = 1;device_current_count = 1;target_lat_long_count = 1;sensor_secs_count = 1;sensor_mamps_count = 1;data_file_size_count = 1;errors_count = 1;%******************************************************************************% Start of log file read%******************************************************************************% Process date and time in log filemonth = fscanf(fid_log, '%d', 1);		% monthday_of_month = fscanf(fid_log, '%d', 1);	% day of monthyear_minus1900 = fscanf(fid_log, '%d', 1);	% yearyear = year_minus1900 - 100;           		% Seaglider year data format is 100=2000, 101=2001, etchours = fscanf(fid_log, '%d', 1);		% hoursminutes = fscanf(fid_log, '%d', 1);		% minutesseconds = fscanf(fid_log, '%d\n', 1);		% seconds%date_string = sprintf('%02d/%02d/%02d', month, day_of_month, year);%time_string = sprintf('%02d:%02d:%02d', hours, minutes, seconds);serial_date_time = datenum(year_minus1900 + 1900, month, day_of_month, ...    hours, minutes, seconds);%DEBUG fprintf(1, 'Serial Date/Time: %s\n', datestr(serial_date_time, 0));% loop for each line in file, read keyword and parse appropriatelywhile(1),   line = fgets(fid_log);   %DEBUG fprintf(1, 'Line: %s', line);   if line(1) ~= '$'      break;   end   [token, value] = strtok(line, ',');			% isolate keyword and parameters   value = strrep(value, ',', ' ');			% remove comma(s) from parameters   index = strmatch(token, keywords, 'exact');			% search for keyword in database   if(isempty(index))      fprintf(1, 'Unknown keyword: %s\n', token);      break;   end      % Display keyword and index, mainly for debugging   %DEBUG fprintf(1, 'Keyword: %s  Index: %d\n', token, index);       % handle special case parameters (multiple parameters,   % instances)      if index == gps1_index      gps1(:, gps1_count) = sscanf(value, '%f %f %f');      gps1_count = gps1_count + 1;         elseif index == sm_cco_index      sm_cco(:, sm_cco_count) = sscanf(value, '%d %f %f %d %d %d %f');      sm_cco_count = sm_cco_count + 1;      elseif index == gps2_index      gps2(:, gps2_count) = sscanf(value, '%f %f %f');      gps2_count = gps2_count + 1;         elseif index == speed_limits_index      speed_limits(:, speed_limits_count) = sscanf(value, '%f %f');      speed_limits_count = speed_limits_count + 1;         elseif index == kalman_control_index      kalman_control(:, kalman_control_count) = sscanf(value, '%f %f');      kalman_control_count = kalman_control_count + 1;   elseif index == kalman_x_index      kalman_x(:, kalman_x_count) = sscanf(value, '%f %f %f %f %f');      kalman_x_count = kalman_x_count + 1;         elseif index == kalman_y_index      kalman_y(:, kalman_y_count) = sscanf(value, '%f %f %f %f %f');      kalman_y_count = kalman_y_count + 1;         elseif index == mhead_rng_wd_index      mhead(:,mhead_rng_wd_count) = sscanf(value, '%f %f %f %f');		      mhead_rng_wd_count = mhead_rng_wd_count + 1;         elseif index == hv_battery_index			      hv_battery(:,hv_battery_count) = sscanf(value, '%f %f');	      hv_battery_count = hv_battery_count + 1;         elseif index == lv_battery_index		      lv_battery(:,lv_battery_count) = sscanf(value, '%f %f');	      lv_battery_count = lv_battery_count + 1;         elseif index == gc_index						      gc(:, gc_count) = sscanf(value, '%d %f %f %f %d %d %f %f %f %f %d %f %f %d %d %d');      gc_count = gc_count + 1;   elseif index == scene_index							      scene(:,scene_count) = sscanf(value, '%f %f %f %f %f');	      scene_count = scene_count + 1;   elseif index == device_time_index      power_state_time(:, device_time_count) = sscanf(value, '%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f');      device_time_count = device_time_count + 1;   elseif index == device_current_index      power_state_current_ma(:, device_current_count) = sscanf(value, ...                                                        '%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f');      device_current_count = device_current_count + 1;   elseif index == target_lat_long_index      target_lat_long = sscanf(value, '%f %f');      target_lat_long_count = target_lat_long_count + 1;   elseif index == sensor_secs_index      sensor_secs = sscanf(value, '%f %f %f %f %f %f');      sensor_secs_count = sensor_secs_count + 1;   elseif index == sensor_mamps_index      sensor_mamps = sscanf(value, '%f %f %f %f %f %f');      sensor_mamps_count = sensor_mamps_count + 1;   elseif index == data_file_size_index      data_file_size = sscanf(value, '%d %d');      data_file_size_count = data_file_size_count + 1;   elseif index == errors_index      errors = sscanf(value, '%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d');      errors_count = errors_count + 1;         elseif index == tgt_name_index       tgt_name = sscanf(value, '%s');   else      log_parameters(index) = str2num(value);	% convert parameter            %DEBUG fprintf(1, 'Log Parameter Value: %f  Index: %d\n\n', log_parameters(index), index);   endend% Dummy up an array in case that message was not in log file or else error message returnedif gps1_count == 1   gps1 = [0 0 0 0]';endif sm_cco_count ==1   sm_cco = [0 0 0 0 0 0 0]';end   if gps2_count == 1   gps2 = [0 0 0 0]';endif speed_limits_count == 1   speed_limits = [0 0]';endif kalman_control_count == 1   kalman_control = [0 0]';endif kalman_x_count == 1   kalman_x = [0 0 0 0 0]';endif kalman_y_count == 1   kalman_y = [0 0 0 0 0]';endif mhead_rng_wd_count == 1   mhead = [0 0 0 0]';endif hv_battery_count == 1   hv_battery = [0 0]';endif lv_battery_count == 1   lv_battery = [0 0]';endif gc_count == 1   gc = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]';endif scene_count == 1   scene = [0 0 0 0]';endif device_time_count==1   power_state_time = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]';endif device_current_count==1   power_state_current_ma = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]';endif target_lat_long_count == 1   target_lat_long = [0 0]';endif sensor_secs_count == 1   sensor_secs = [0 0 0 0 0 0 0]';endif sensor_mamps_count == 1   sensor_mamps = [0 0 0 0 0 0 0]';endif data_file_size_count == 1   data_file_size = [0 0]';endif errors_count==1   errors = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]';endfprintf(1, '#%d %s\n', ...    log_parameters(2), datestr(serial_date_time));% Debuggingif 0fprintf(1, '\nLOG FILE PARAMETERS\n');fprintf(1, 'Gps1 = %d %.3f %.3f %d\n', gps1);fprintf(1, 'Gps2 = %d %.3f %.3f %d\n', gps2);fprintf(1, 'Speed Limits = %.3f %.3f\n', speed_limits);fprintf(1, 'Kalman Control = %.3f %.3f\n', kalman_control);fprintf(1, 'Kalman X = %6.3f %6.3f %6.3f %6.3f %6.3f\n', kalman_x);fprintf(1, 'Kalman Y = %6.3f %6.3f %6.3f %6.3f %6.3f\n', kalman_y);fprintf(1, 'Mhead = %6.3f %6.3f %6.3f %6.3f\n', mhead);fprintf(1, 'HV Battery = %6.3f %6.3f\n', hv_battery);fprintf(1, 'LV Battery = %6.3f %6.3f\n', lv_battery);fprintf(1, 'GC = %6d %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f\n', gc);fprintf(1, 'Scene = %6.3f %6.3f %6.3f %6.3f\n', scene);fprintf(1, 'Power State Time = %d %d %d %d %d %d %d %d %d %d\n', power_state_time);fprintf(1, 'Power State Current = %d %d %d %d %d %d %d %d %d %d\n', power_state_current_ma);fprintf(1, 'Target Lat/Long = %.3f %.3f\n', target_lat_long);end